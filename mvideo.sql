-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.address_books
(
    user_id integer NOT NULL,
    city character varying COLLATE pg_catalog."default" NOT NULL,
    street character varying COLLATE pg_catalog."default" NOT NULL,
    building character varying COLLATE pg_catalog."default" NOT NULL,
    entrance character varying COLLATE pg_catalog."default" NOT NULL,
    apartment character varying COLLATE pg_catalog."default" NOT NULL,
    commentary text COLLATE pg_catalog."default",
    CONSTRAINT address_books_pkey PRIMARY KEY (user_id, apartment, entrance, building, street, city)
);

CREATE TABLE IF NOT EXISTS public.cameras
(
    id integer NOT NULL,
    matrix_resolution numeric NOT NULL,
    zoom numeric NOT NULL,
    matrix_size integer[] NOT NULL,
    focus_min integer NOT NULL,
    focus_max integer NOT NULL,
    quality character varying(100) COLLATE pg_catalog."default" NOT NULL,
    matrix_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    frame_frequency integer NOT NULL,
    is_wifi boolean NOT NULL,
    CONSTRAINT cameras_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.carts
(
    user_id integer NOT NULL,
    item_id bigint NOT NULL,
    item_quantity integer NOT NULL,
    CONSTRAINT carts_pkey PRIMARY KEY (user_id, item_id)
);

CREATE TABLE IF NOT EXISTS public.favourite_items
(
    user_id bigint NOT NULL,
    item_id bigint NOT NULL,
    CONSTRAINT favourite_items_pkey PRIMARY KEY (item_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.favourite_stores
(
    user_id integer NOT NULL,
    store_id integer NOT NULL,
    CONSTRAINT favourite_stores_pkey PRIMARY KEY (user_id, store_id)
);

CREATE TABLE IF NOT EXISTS public.fridges
(
    id bigint NOT NULL,
    color character varying COLLATE pg_catalog."default",
    freezer_volume integer,
    cooling_chamber_volume integer,
    is_freezer_frost boolean,
    is_cooling_frost boolean,
    is_indication boolean,
    regulated_shelves_number integer,
    control_type character varying COLLATE pg_catalog."default",
    CONSTRAINT fridges_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.game_consoles
(
    id integer NOT NULL,
    ssd_size integer NOT NULL,
    is_hdr boolean NOT NULL,
    wifi character varying(50) COLLATE pg_catalog."default" NOT NULL,
    guarantee_period integer NOT NULL,
    is_wireless_gamepad boolean NOT NULL,
    CONSTRAINT game_consoles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.grinders
(
    id integer NOT NULL,
    max_wheel_diameter integer NOT NULL,
    landing_hole_diameter numeric NOT NULL,
    max_rotation_speed integer NOT NULL,
    power_consumption integer NOT NULL,
    guarantee_period integer NOT NULL,
    wheels_number integer NOT NULL,
    CONSTRAINT grinders_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.headphones
(
    id bigint NOT NULL,
    connection_type character varying COLLATE pg_catalog."default",
    color character varying COLLATE pg_catalog."default",
    min_frequency integer,
    max_frequency integer,
    sensitivity integer,
    ear_pads_material character varying COLLATE pg_catalog."default",
    guarantee_period integer,
    is_headset boolean,
    CONSTRAINT headphones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.hoovers
(
    id integer NOT NULL,
    suction_power integer NOT NULL,
    nozzles_number integer NOT NULL,
    power_cord_length integer NOT NULL,
    power_consumption integer NOT NULL,
    is_upright boolean NOT NULL,
    weight integer NOT NULL,
    guarantee_period integer NOT NULL,
    CONSTRAINT hoovers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.items
(
    id integer NOT NULL DEFAULT nextval('items_id_seq'::regclass),
    price numeric NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    description character varying COLLATE pg_catalog."default",
    manufacturer_id integer,
    CONSTRAINT items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.items_within_orders
(
    order_id bigint NOT NULL,
    item_id bigint NOT NULL,
    CONSTRAINT items_within_orders_pkey PRIMARY KEY (order_id, item_id)
);

CREATE TABLE IF NOT EXISTS public.items_within_stores
(
    item_id bigint NOT NULL,
    store_id integer NOT NULL,
    CONSTRAINT items_within_stores_pkey PRIMARY KEY (item_id, store_id)
);

CREATE TABLE IF NOT EXISTS public.laptops
(
    id bigint NOT NULL,
    display_resolution character varying COLLATE pg_catalog."default",
    cpu_type text COLLATE pg_catalog."default",
    ssd_size integer,
    os character varying COLLATE pg_catalog."default",
    video_card_type text COLLATE pg_catalog."default",
    ram_size integer,
    weight integer,
    CONSTRAINT laptops_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.manufacturers
(
    id integer NOT NULL DEFAULT nextval('manufacturers_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT manufacturers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id integer NOT NULL DEFAULT nextval('my_serial'::regclass),
    user_id integer NOT NULL,
    order_address character varying COLLATE pg_catalog."default" NOT NULL,
    order_date date NOT NULL,
    delivery_method character varying COLLATE pg_catalog."default" NOT NULL,
    order_price numeric NOT NULL,
    payment_method character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT orders_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.smartphones
(
    id bigint NOT NULL,
    display numeric,
    cpu_type character varying COLLATE pg_catalog."default",
    rom integer,
    camera_quality bigint[],
    CONSTRAINT smartphones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.stores
(
    id integer NOT NULL DEFAULT nextval('stores_id_seq'::regclass),
    city character varying COLLATE pg_catalog."default" NOT NULL,
    street character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT stores_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.system_units
(
    id bigint NOT NULL,
    cpu_type character varying COLLATE pg_catalog."default",
    ram_size integer,
    video_card character varying COLLATE pg_catalog."default",
    ssd_size integer,
    vram_size integer,
    os text COLLATE pg_catalog."default",
    guarantee_period integer,
    CONSTRAINT system_units_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tablets
(
    id bigint NOT NULL,
    display_size numeric,
    rom_size integer,
    ram_size integer,
    cores_number integer,
    cpu_frequency numeric,
    bluetooth_module integer,
    internet_standard character varying COLLATE pg_catalog."default",
    CONSTRAINT tablets_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tvs
(
    id bigint NOT NULL,
    is_hdr boolean,
    is_smarttv boolean,
    is_bluetooth_module boolean,
    os text COLLATE pg_catalog."default",
    is_wifi boolean,
    CONSTRAINT tvs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('users_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    surname character varying COLLATE pg_catalog."default" NOT NULL,
    patronymic character varying COLLATE pg_catalog."default",
    email character varying COLLATE pg_catalog."default" NOT NULL,
    gender character varying COLLATE pg_catalog."default",
    date_of_birth date,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    phone character varying COLLATE pg_catalog."default" NOT NULL,
    extra_phone character varying COLLATE pg_catalog."default",
    CONSTRAINT personal_data_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.video_recorders
(
    id integer NOT NULL,
    fps character varying(100) COLLATE pg_catalog."default" NOT NULL,
    viewing_angle integer NOT NULL,
    max_frame_frequency integer NOT NULL,
    max_resolution integer NOT NULL,
    is_night_shooting boolean NOT NULL,
    recording_interval character varying(10) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT video_recorders_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.address_books
    ADD CONSTRAINT fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.cameras
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS cameras_pkey
    ON public.cameras(id);


ALTER TABLE IF EXISTS public.carts
    ADD CONSTRAINT fkey_1 FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.carts
    ADD CONSTRAINT fkey_2 FOREIGN KEY (item_id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.favourite_items
    ADD CONSTRAINT fkey_1 FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.favourite_items
    ADD CONSTRAINT fkey_2 FOREIGN KEY (item_id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.favourite_stores
    ADD CONSTRAINT fkey1 FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.favourite_stores
    ADD CONSTRAINT fkey2 FOREIGN KEY (store_id)
    REFERENCES public.stores (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.fridges
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS fridges_pkey
    ON public.fridges(id);


ALTER TABLE IF EXISTS public.game_consoles
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS game_consoles_pkey
    ON public.game_consoles(id);


ALTER TABLE IF EXISTS public.grinders
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS grinders_pkey
    ON public.grinders(id);


ALTER TABLE IF EXISTS public.headphones
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS headphones_pkey
    ON public.headphones(id);


ALTER TABLE IF EXISTS public.hoovers
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS hoovers_pkey
    ON public.hoovers(id);


ALTER TABLE IF EXISTS public.items
    ADD CONSTRAINT fkey1 FOREIGN KEY (manufacturer_id)
    REFERENCES public.manufacturers (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.items_within_orders
    ADD CONSTRAINT fkey_1 FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.items_within_orders
    ADD CONSTRAINT fkey_2 FOREIGN KEY (item_id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.items_within_stores
    ADD CONSTRAINT fkey1 FOREIGN KEY (item_id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.items_within_stores
    ADD CONSTRAINT fkey2 FOREIGN KEY (store_id)
    REFERENCES public.stores (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.laptops
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS laptops_pkey
    ON public.laptops(id);


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fkey1 FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.smartphones
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS smartphones_pkey
    ON public.smartphones(id);


ALTER TABLE IF EXISTS public.system_units
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS system_units_pkey
    ON public.system_units(id);


ALTER TABLE IF EXISTS public.tablets
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS tablets_pkey
    ON public.tablets(id);


ALTER TABLE IF EXISTS public.tvs
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS tvs_pkey
    ON public.tvs(id);


ALTER TABLE IF EXISTS public.video_recorders
    ADD CONSTRAINT fkey FOREIGN KEY (id)
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS video_recorders_pkey
    ON public.video_recorders(id);

END;